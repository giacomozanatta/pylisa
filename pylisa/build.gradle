plugins {
    id 'java'
    id 'application'
   	id 'antlr'
   	id 'eclipse'
   	id "com.diffplug.spotless" version "6.18.0"
   	id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/lisa-analyzer/lisa'
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

group = 'it.unive'
version = '0.1a1'
mainClassName = 'it.unive.pylisa.PyLiSA'

dependencies {
    implementation 'io.github.lisa-analyzer:lisa-sdk:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-program:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-analyses:0.1b8'
    implementation group: 'org.jdom', name: 'jdom2', version: '2.0.5'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '3.0.2'
    antlr 'org.antlr:antlr4:4.8-1'
    testImplementation 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.7'
}

generateGrammarSource {
    dependsOn "sourcesJar"
    maxHeapSize = "64m"
    arguments += ["-visitor", "-no-listener"]
    
        doLast {
    	copy {
      		from 'build/generated-src/antlr/main/'
      		include '*.*'
      		into 'build/generated-src/antlr/main/it/unive/pylisa/antlr'
    	}
   		project.delete fileTree('build/generated-src/antlr/main').include('*.*')
  	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava   {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

spotless {
    enforceCheck = false
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        // tabs, no spaces
        indentWithTabs()
    
        // keep imports clean 
        importOrder() 
        removeUnusedImports()
    
        // use the eclipse formatting with the one provided with the project
        eclipse().configFile(new File(rootProject.projectDir, 'spotless-formatting.xml'))
    
        target 'src/**/*.java'    
        // ignore generated code
        targetExclude '**/build/generated/**/*.java'
        targetExclude '**/build/generated-src/**/*.java'
        targetExclude '**/target/generated-sources/**/*.java'
    }
    antlr4 {
        target 'src/*/antlr/**/*.g4'
        antlr4Formatter() 
    }
}

spotlessJava {
	// declaring explicit dependencies
	dependsOn 'compileJava', 'compileTestJava', 'processTestResources', 'spotlessAntlr4'
}

spotlessJavaCheck { 
    finalizedBy 'spotlessErrorMessage'
}

spotlessAntlr4Check { 
    finalizedBy 'spotlessErrorMessage'
}

task spotlessErrorMessage {
    onlyIf {
        spotlessJavaCheck.state.failure != null || spotlessAntlr4Check.state.failure != null
    }
    doLast {
        logger.error('Spotless plugin thrown an error. This means that the code is not correctly formatted.')
        logger.error('To reproduce locally, execute \'./gradlew spotlessCheck\'')
        logger.error('To automatically fix all the problems, execute \'./gradlew spotlessApply\'')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name 
            groupId = 'io.github.lisa-analyzer'
            from components.java
            pom {
                name = 'PyLiSA (' + project.name + ')' 
                description = 'Python frontend for LiSA'
                url = 'https://lisa-analyzer.github.io/'
                packaging = 'jar'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'lucaneg'
                        name = 'Luca Negrini'
                        email = 'luca.negrini@unive.it'
                        url = 'https://lucaneg.github.io/'
                        organization = 'Ca\' Foscari University of Venice, Italy'
                        organizationUrl = 'https://www.unive.it/'
                    }
                    developer {
                        id = 'pietroferrara'
                        name = 'Pietro Ferrara'
                        email = 'pietro.ferrara@unive.it'
                        url = 'https://www.dais.unive.it/~ferrara/'
                        organization = 'Ca\' Foscari University of Venice, Italy'
                        organizationUrl = 'https://www.unive.it/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/lisa-analyzer/pylisa.git'
                    developerConnection = 'scm:git:ssh://github.com/lisa-analyzer/pylisa.git'
                    url = 'https://github.com/lisa-analyzer/pylisa'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('MAVEN_USERNAME')
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

signing {
    def signingKey = System.getenv('SIGN_KEY')
    def signingPassword = System.getenv('SIGN_PW')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}